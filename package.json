// netlify/functions/contact.js
import { Resend } from 'resend';
import twilio from 'twilio';

// Utility: consistent JSON responses
const json = (statusCode, data, extraHeaders = {}) => ({
  statusCode,
  headers: {
    'Content-Type': 'application/json; charset=utf-8',
    'Access-Control-Allow-Origin': process.env.CORS_ORIGIN || '*',
    'Access-Control-Allow-Methods': 'POST, OPTIONS',
    'Access-Control-Allow-Headers': 'Content-Type',
    ...extraHeaders,
  },
  body: JSON.stringify(data),
});

export const handler = async (event) => {
  // CORS preflight
  if (event.httpMethod === 'OPTIONS') {
    return {
      statusCode: 204,
      headers: {
        'Access-Control-Allow-Origin': process.env.CORS_ORIGIN || '*',
        'Access-Control-Allow-Methods': 'POST, OPTIONS',
        'Access-Control-Allow-Headers': 'Content-Type',
        'Vary': 'Origin',
      },
      body: '',
    };
  }

  if (event.httpMethod !== 'POST') {
    return json(405, { error: 'Method Not Allowed' });
  }

  try {
    let payload = {};
    try {
      payload = JSON.parse(event.body || '{}');
    } catch {
      return json(400, { error: 'Invalid JSON body.' });
    }

    const {
      name,
      email,
      phone,
      service,
      message,
      sms_opt_in,
    } = payload;

    if (!name || !email || !service || !message) {
      return json(400, { error: 'Missing required fields: name, email, service, message.' });
    }

    // Email (Resend)
    const resend = new Resend(process.env.RESEND_API_KEY);
    const TO_EMAIL = process.env.TO_EMAIL || 'josie@ask-josie.com';
    const FROM_EMAIL = process.env.FROM_EMAIL || 'no-reply@ask-josie.com'; // must be verified in Resend

    const htmlToJosie = `
      <div style="font-family:Inter, system-ui, -apple-system, Segoe UI, Roboto, sans-serif;">
        <h2>New inquiry — ${escapeHtml(service)}</h2>
        <p><strong>Name:</strong> ${escapeHtml(name)}</p>
        <p><strong>Email:</strong> ${escapeHtml(email)}</p>
        <p><strong>Phone:</strong> ${escapeHtml(phone || '—')}</p>
        <p><strong>Wants SMS updates:</strong> ${sms_opt_in === 'yes' ? 'Yes' : 'No'}</p>
        <p><strong>Message:</strong></p>
        <pre style="white-space:pre-wrap;background:#f6f7fb;padding:12px;border-radius:8px;border:1px solid #e8eaf3">${escapeHtml(message)}</pre>
      </div>
    `;

    const htmlToClient = `
      <div style="font-family:Inter, system-ui, -apple-system, Segoe UI, Roboto, sans-serif;">
        <h2>Thanks, ${escapeHtml(name)}!</h2>
        <p>Your ${escapeHtml(service)} request is in. I’ll get back to you within 1–2 days.</p>
        <p>— josie</p>
      </div>
    `;

    // Send to Josie
    await resend.emails.send({
      from: `ask josie <${FROM_EMAIL}>`,
      to: [TO_EMAIL],
      subject: `New inquiry: ${service} — ${name}`,
      html: htmlToJosie,
      reply_to: email, // Resend v4 supports snake_case
    });

    // Auto-reply to client
    await resend.emails.send({
      from: `ask josie <${FROM_EMAIL}>`,
      to: [email],
      subject: `Got it — your ${service} request`,
      html: htmlToClient,
    });

    // SMS (Twilio) if opted in
    if (sms_opt_in === 'yes' && phone && phone.trim().length >= 7) {
      const client = twilio(process.env.TWILIO_ACCOUNT_SID, process.env.TWILIO_AUTH_TOKEN);
      const FROM_SMS = process.env.TWILIO_FROM; // e.g., +14155551234
      const cleaned = phone.replace(/[^\d+]/g, '');

      if (FROM_SMS) {
        await client.messages.create({
          body: 'ask josie: thanks for reaching out! josie will contact you within 1–2 days.',
          from: FROM_SMS,
          to: cleaned,
        });
      }
    }

    return json(200, { ok: true });
  } catch (err) {
    console.error(err);
    return json(500, { error: 'Server error' });
  }
};

function escapeHtml(s = '') {
  return String(s)
    .replaceAll('&', '&amp;')
    .replaceAll('<', '&lt;')
    .replaceAll('>', '&gt;')
    .replaceAll('"', '&quot;')
    .replaceAll("'", '&#039;');
}
